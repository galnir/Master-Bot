generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DB_URL")
}

model User {
  id        String     @id
  playlists Playlist[]
  username  String
  guilds    Guild[]
  reminders Reminder[]
  timeZone  Int?
}

model Song {
  id         Int      @id @default(autoincrement())
  length     Int
  track      String
  identifier String
  author     String
  isStream   Boolean
  position   Int
  title      String
  uri        String
  isSeekable Boolean
  sourceName String
  thumbnail  String
  added      Int
  playlistId Int
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

model Playlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  songs     Song[]
}

model Guild {
  id         String   @id
  name       String
  added      DateTime @default(now())
  volume     Int
  notifyList String[]
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id])

  // Settings
  disabledCommands      String[] @map("disabled_commands")
  logChannel            String?  @map("log_channel")
  welcomeMessageChannel String?  @map("welcome_message_channel")
  welcomeMessage        String?  @map("welcome_message")
  welcomeMessageEnabled Boolean? @default(false) @map("welcome_message_enabled")
}

model TwitchNotify {
  twitchId   String   @id
  logo       String
  live       Boolean  @default(false)
  channelIds String[]
  sent       Boolean
}

model Reminder {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  repeat      String?
  event       String
  description String?
  dateTime    String
  userId      String
  user        User?    @relation(fields: [userId], references: [id])
}
